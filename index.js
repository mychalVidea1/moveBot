require('dotenv').config();

const { Client, GatewayIntentBits, Partials, EmbedBuilder, PermissionsBitField, ActionRowBuilder, ButtonBuilder, ButtonStyle, REST, Routes, SlashCommandBuilder, PermissionFlagsBits, MessageFlags } = require('discord.js');
const { MongoClient } = require('mongodb');
const axios = require('axios');
const sharp = require('sharp');
const getFrames = require('gif-frames');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildModeration
    ],
    partials: [Partials.Channel, Partials.GuildMember, Partials.Message]
});

// ======================= NASTAVEN√ç =======================
const prefix = 'm!';
const roleId = process.env.ROLE_ID;
const geminiApiKey = process.env.GEMINI_API_KEY;
const errorGif = 'https://tenor.com/lVEfXc8hvbP.gif';
const ownerRoleId = '875091178322812988';
const activityChannelId = '875097279650992128';
const startupChannelId = '1005985776158388264';
const logChannelId = '1025689879973203968';
const aiModerationChannelIds = ['875097279650992128', '1261094481415897128', '1275999194313785415', '1322337083745898616', '1419340737048350880'];
const MAX_WORDS_FOR_AI = 67;
const MIN_CHARS_FOR_AI = 4;
const COOLDOWN_SECONDS = 5;
const NOTIFICATION_COOLDOWN_MINUTES = 10;
const otherBotPrefixes = ['?', '!', 'db!', 'c!', '*'];
const emojiSpamRegex = /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]|<a?:\w+:\d+>){10,}/;
const mediaUrlRegex = /https?:\/\/(media\.tenor\.com|tenor\.com|giphy\.com|i\.imgur\.com|cdn\.discordapp\.com|img\.youtube\.com)\S+(?:\.gif|\.png|\.jpg|\.jpeg|\.webp|\.mp4)/i;
const MAX_FILE_SIZE_BYTES = 8 * 1024 * 1024;
const allowedGuildId = '875027587477409862';

const mongoUri = process.env.MONGO_URL;
if (!mongoUri) { throw new Error("MONGO_URL nen√≠ nastaveno v promƒõnn√Ωch!"); }
const mongoClient = new MongoClient(mongoUri);
let db;

const activeImageModel = 'gemini-2.5-pro';
const firstFallbackImageModel = 'gemini-1.5-pro-latest';
const secondFallbackImageModel = 'gemini-2.5-flash';
let hasSwitchedToFirstFallback = false;
let hasSwitchedToSecondFallback = false;

const level3Words = [ 'nigga', 'n1gga', 'n*gga', 'niggas', 'nigger', 'n1gger', 'n*gger', 'niggers', 'niga', 'n1ga', 'nygga', 'niggar', 'negr', 'ne*r', 'n*gr', 'n3gr', 'neger', 'negri', 'negry' ];
const level2Words = [ 'kundo', 'kundy', 'p√≠ƒço', 'pico', 'piƒço', 'ƒçur√°ku', 'curaku', 'ƒç≈Ør√°ku', 'p√≠ƒçus', 'picus', 'zmrd', 'zmrde', 'mrdko', 'buzerant', 'buzna', 'kurva', 'kurvo', 'kurvy', 'ƒçur√°k', 'curak', '≈°ukat', 'mrdat', 'bitch', 'b*tch', 'whore', 'slut', 'faggot', 'motherfucker', 'asshole', 'assh*le', 'bastard', 'cunt', 'c*nt', 'dickhead', 'dick', 'pussy', 'fuck', 'f*ck', 'fck', 'kys', 'kill yourself', 'go kill yourself', 'zabij se', 'fuk', 'hitler' ];
const level1Words = [ 'kret√©n', 'sraƒçka', 'p√≠ƒço', 'piƒço', 'fakin', 'curak', 'p√≠ƒça', 'zkurvysyn', 'dop√≠ƒçi', 'dokundy'];
const level3Regex = new RegExp(`\\b(${level3Words.join('|')})\\b`, 'i');
const level2Regex = new RegExp(`\\b(${level2Words.join('|')})\\b`, 'i');
const level1Regex = new RegExp(`\\b(${level1Words.join('|')})\\b`, 'i');
const userCooldowns = new Map();
let lastLimitNotificationTimestamp = 0;

async function getAverageRating(userId) {
    if (!db) return 0.0;
    const ratingsCollection = db.collection('ratings');
    const userData = await ratingsCollection.findOne({ _id: userId });
    return userData ? userData.average : 0.0;
}

async function updateRating(userId, newRatingValue, reason = "") {
    if (!db) return;
    const currentAverage = await getAverageRating(userId);
    const newAverage = (currentAverage + newRatingValue) / 2;
    const ratingsCollection = db.collection('ratings');
    await ratingsCollection.updateOne({ _id: userId }, { $set: { average: newAverage } }, { upsert: true });
    console.log(`U≈æivatel ${userId} dostal hodnocen√≠ ${newRatingValue}. Nov√Ω pr≈Ømƒõr: ${newAverage.toFixed(2)}. D≈Øvod: ${reason}`);
}

async function resetRating(userId, reason = "") {
    if (!db) return;
    const ratingsCollection = db.collection('ratings');
    await ratingsCollection.updateOne({ _id: userId }, { $set: { average: 0.0 } }, { upsert: true });
    console.log(`Hodnocen√≠ pro u≈æivatele ${userId} bylo resetov√°no na 0. D≈Øvod: ${reason}`);
}

async function addActivityRating(userId, reason = "") {
    if (!db) return;
    const ratingsCollection = db.collection('ratings');
    const result = await ratingsCollection.findOneAndUpdate(
        { _id: userId },
        { $inc: { average: 0.1 } },
        { upsert: true, returnDocument: 'after' }
    );
    const newAverage = result.average;
    console.log(`U≈æivatel ${userId} dostal +0.1 za aktivitu. Nov√Ω pr≈Ømƒõr: ${newAverage.toFixed(2)}. D≈Øvod: ${reason}`);
}

async function updateRoleStatus(userId, guild, sourceMessage = null) {
    try {
        if (!guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) return;
        const member = await guild.members.fetch(userId).catch(() => null);
        const role = guild.roles.cache.get(roleId);
        if (!member || !role) return;
        const averageRating = await getAverageRating(userId);
        const hasRole = member.roles.cache.has(roleId);
        if (averageRating > 9 && !hasRole) {
            await member.roles.add(role);
            const messageContent = `üéâ Gratulace, <@${member.id}>! Tv√© sk√≥re tƒõ katapultovalo mezi elitu a z√≠skal(a) jsi roli **${role.name}**! üöÄ`;
            if (sourceMessage?.channel && !sourceMessage?.deleted) sourceMessage.reply(messageContent).catch(() => {});
        } else if (averageRating <= 9 && hasRole) {
            await member.roles.remove(role);
            const messageContent = `üìâ Pozor, <@${member.id}>! Tv√© hodnocen√≠ kleslo a p≈ôi≈°el(a) jsi o roli **${role.name}**. Zaber!`;
            if (sourceMessage?.channel && !sourceMessage?.deleted) sourceMessage.reply(messageContent).catch(() => {});
        }
    } catch (error) {}
}

async function analyzeText(text) {
    if (!geminiApiKey) return false;
    const modelsToTry = ['gemini-2.5-flash-lite', 'gemini-2.0-flash-lite', 'gemini-1.5-flash'];
    const prompt = `Jsi AI moder√°tor pro neform√°ln√≠, hern√≠ Discord server. Tv√Ωm √∫kolem je odhalit zpr√°vy, kter√© jsou ≈°kodliv√©. Ignoruj bƒõ≈æn√© lehk√© nad√°vky a p≈ô√°telsk√© po≈°≈•uchov√°n√≠. Zas√°hni, pokud zpr√°va p≈ôekroƒç√≠ hranici bƒõ≈æn√©ho "trash talku" a stane se z n√≠ nen√°vistn√Ω projev, vyhro≈æov√°n√≠ nebo ≈°ikana. Je tato zpr√°va takov√°? Odpovƒõz jen "ANO" nebo "NE".\n\nText: "${text}"`;
    const requestBody = { contents: [{ parts: [{ text: prompt }] }], generationConfig: { maxOutputTokens: 5 } };
    for (const model of modelsToTry) {
        try {
            const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${geminiApiKey}`, requestBody);
            const candidateText = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
            if (!candidateText) continue;
            const result = candidateText.trim().toUpperCase();
            return result.includes("ANO");
        } catch (error) { continue; }
    }
    return false;
}

async function analyzeImage(imageUrl) {
    if (!geminiApiKey) return false;
    const modelsToTry = [activeImageModel, firstFallbackImageModel, secondFallbackImageModel];
    let imageBuffer, mimeType;
    try {
        imageBuffer = (await axios.get(imageUrl, { responseType: 'arraybuffer' })).data;
        mimeType = (await axios.head(imageUrl)).headers['content-type'];
        if (mimeType.startsWith('image/gif')) {
            const frames = await getFrames({ url: imageBuffer, frames: 'all', outputType: 'png', quality: 10 });
            if (frames.length === 0) return false;
            const middleFrameIndex = Math.floor(frames.length / 2);
            const frameStream = frames[middleFrameIndex].getImage();
            const chunks = [];
            await new Promise((resolve, reject) => { frameStream.on('data', chunk => chunks.push(chunk)); frameStream.on('error', reject); frameStream.on('end', resolve); });
            imageBuffer = Buffer.concat(chunks);
            mimeType = 'image/png';
        }
        if (mimeType.startsWith('image/')) {
            imageBuffer = await sharp(imageBuffer).resize({ width: 512, withoutEnlargement: true }).toBuffer();
        } else { return false; }
    } catch (preprocessingError) { return 'FILTERED'; }
    const base64Image = imageBuffer.toString('base64');
    const prompt = `Jsi AI moder√°tor pro hern√≠ Discord server. Posuƒè, jestli je tento obr√°zek skuteƒçnƒõ nevhodn√Ω pro komunitu (pornografie, gore, explicitn√≠ n√°sil√≠, nen√°vistn√© symboly, rasismus). Ignoruj hern√≠ n√°sil√≠ (st≈ô√≠len√≠ ve hr√°ch), krev ve hr√°ch, hern√≠ rozhran√≠ (UI) a bƒõ≈æn√© internetov√© memy, kter√© nejsou extr√©mn√≠. Buƒè shov√≠vav√Ω k textu na screenshotech. Odpovƒõz jen "ANO" (pokud je nevhodn√Ω) nebo "NE" (pokud je v po≈ô√°dku).`;
    const requestBody = { contents: [{ parts: [{ text: prompt }, { inline_data: { mime_type: mimeType, data: base64Image } }] }] };
    for (const model of modelsToTry) {
        try {
            const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${geminiApiKey}`, requestBody);
            if (!response.data.candidates || response.data.candidates.length === 0) { return 'FILTERED'; }
            const result = response.data.candidates[0].content.parts[0].text.trim().toUpperCase();
            return result.includes("ANO");
        } catch (error) { continue; }
    }
    return 'FILTERED';
}

async function moderateMessage(message) {
    if (!message.guild || !message.author || message.author.bot) return false;
    const member = await message.guild.members.fetch(message.author.id).catch(() => null);
    if (!member || member.roles.cache.has(ownerRoleId)) return false;
    if (!aiModerationChannelIds.includes(message.channel.id)) return false;

    let mediaUrl = null;
    if (message.attachments.size > 0) { const attachment = message.attachments.first(); if (attachment.size < MAX_FILE_SIZE_BYTES && (attachment.contentType?.startsWith('image/') || attachment.contentType?.startsWith('video/'))) { mediaUrl = attachment.url; } }
    if (!mediaUrl && message.embeds.length > 0) { const embed = message.embeds[0]; if (embed.image) mediaUrl = embed.image.url; else if (embed.thumbnail) mediaUrl = embed.thumbnail.url; }
    if (!mediaUrl) { const match = message.content.match(mediaUrlRegex); if (match) mediaUrl = match[0]; }

    if (mediaUrl) {
        let cleanMediaUrl = mediaUrl;
        if (cleanMediaUrl.includes('?')) { cleanMediaUrl = cleanMediaUrl.split('?')[0]; }
        const imageResult = await analyzeImage(cleanMediaUrl);
        if (imageResult === true) {
            await updateRating(message.author.id, -2, "Nevhodn√Ω obr√°zek/GIF");
            await updateRoleStatus(message.author.id, message.guild, message);
            try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tv≈Øj obr√°zek/GIF byl vyhodnocen jako nevhodn√Ω a tv√© hodnocen√≠ bylo sn√≠≈æeno.`); setTimeout(() => warningMsg.delete().catch(() => {}), 15000); } catch (err) {}
            return true;
        } else if (imageResult === 'FILTERED') {
            const logChannel = await client.channels.fetch(logChannelId).catch(() => null);
            if (logChannel) {
                const embed = new EmbedBuilder().setColor('#FFA500').setTitle('‚ö†Ô∏è AI Moderace Selhala').setDescription(`AI nedok√°zala analyzovat obr√°zek od <@${message.author.id}>.\n≈Ω√°d√°m o lidsk√Ω posudek.`).setImage(cleanMediaUrl).addFields({ name: 'Odkaz na zpr√°vu', value: `[Klikni zde](${message.url})` }).setTimestamp();
                const row = new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId(`approve-${message.id}-${message.author.id}`).setLabel('‚úÖ Ponechat').setStyle(ButtonStyle.Success), new ButtonBuilder().setCustomId(`punish-${message.id}-${message.author.id}`).setLabel('‚ùå Smazat a potrestat').setStyle(ButtonStyle.Danger));
                await logChannel.send({ embeds: [embed], components: [row] });
            }
        }
    }

    let textToAnalyze = message.content.replace(mediaUrlRegex, '').trim();
    if (textToAnalyze.length === 0 && message.embeds.length > 0) { const embed = message.embeds[0]; if (embed.description) textToAnalyze = embed.description; }
    if (textToAnalyze.length === 0) return false;

    if (level3Regex.test(textToAnalyze)) { await resetRating(message.author.id, "Zak√°zan√© slovo"); await updateRoleStatus(message.author.id, message.guild, message); try { await message.delete(); const warningMsg = await message.channel.send(`U≈æivatel <@${message.author.id}> pou≈æil p≈ô√≠snƒõ zak√°zan√© slovo. Tvoje hodnocen√≠ bylo **resetov√°no na 0**!`); setTimeout(() => warningMsg.delete().catch(() => {}), 20000); } catch (err) {} return true; }
    if (level2Regex.test(textToAnalyze)) { await updateRating(message.author.id, -3, "Hrub√° ur√°≈æka"); await updateRoleStatus(message.author.id, message.guild, message); try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, za toto chov√°n√≠ ti byl sn√≠≈æen rating o **3 body**.`); setTimeout(() => warningMsg.delete().catch(() => {}), 10000); } catch (err) {} return true; }
    if (level1Regex.test(textToAnalyze)) { await updateRating(message.author.id, -1, "Nevhodn√© slovo"); await updateRoleStatus(message.author.id, message.guild, message); try { const warningReply = await message.reply(`Slovn√≠k pros√≠m. ü§´ Za tuto zpr√°vu ti byl lehce sn√≠≈æen rating.`); setTimeout(() => warningReply.delete().catch(() => {}), 10000); } catch (err) {} return true; }
    if (emojiSpamRegex.test(textToAnalyze)) { try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, hoƒè se do klidu, tolik emoji nen√≠ nutn√Ω! üòÇ`); setTimeout(() => warningMsg.delete().catch(() => {}), 10000); } catch (err) {} return true; }

    const wordCount = textToAnalyze.split(' ').length;
    if (textToAnalyze.length >= MIN_CHARS_FOR_AI && wordCount <= MAX_WORDS_FOR_AI) {
        const now = Date.now();
        const lastCheck = userCooldowns.get(message.author.id);
        if (!lastCheck || (now - lastCheck > COOLDOWN_SECONDS * 1000)) {
            userCooldowns.set(message.author.id, now);
            const toxicityResult = await analyzeText(textToAnalyze);
            if (toxicityResult === true) { await updateRating(message.author.id, -2, `Toxick√° zpr√°va (AI)`); await updateRoleStatus(message.author.id, message.guild, message); try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tv√° zpr√°va byla nevhodn√° a tv√© hodnocen√≠ bylo sn√≠≈æeno.`); setTimeout(() => warningMsg.delete().catch(() => {}), 15000); } catch (err) {} return true; } 
            else if (toxicityResult === 'API_LIMIT') { const now = Date.now(); if (now - lastLimitNotificationTimestamp > NOTIFICATION_COOLDOWN_MINUTES * 60 * 1000) { lastLimitNotificationTimestamp = now; try { const reply = await message.reply(`AI nemohla tuto zpr√°vu ovƒõ≈ôit, proto≈æe si dala ≈°lof√≠ka na p√°r hodin!`); setTimeout(() => reply.delete().catch(() => {}), 300000); } catch(err) {} } }
        }
    }
    return false;
}

client.once('clientReady', async () => {
    try {
        await mongoClient.connect();
        db = mongoClient.db();
        console.log('√öspƒõ≈°nƒõ p≈ôipojeno k MongoDB datab√°zi.');
    } catch (err) {
        console.error('Kritick√° chyba: Nepoda≈ôilo se p≈ôipojit k MongoDB!', err);
        process.exit(1);
    }
    
    console.log(`Bot je online jako ${client.user.tag}!`);
    try {
        const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
        const commands = [
            new SlashCommandBuilder().setName('rate').setDescription('Ohodnot√≠ u≈æivatele (pouze pro majitele s rol√≠).').addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, kter√©ho chce≈° ohodnotit.').setRequired(true)).addNumberOption(option => option.setName('hodnocen√≠').setDescription('ƒå√≠slo od -10 do 10.').setRequired(true).setMinValue(-10).setMaxValue(10)).setDMPermission(false),
            new SlashCommandBuilder().setName('score').setDescription('Zobraz√≠ tv√© hodnocen√≠ nebo hodnocen√≠ jin√©ho u≈æivatele.').addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, jeho≈æ sk√≥re chce≈° vidƒõt.').setRequired(false)).setDMPermission(false),
            new SlashCommandBuilder().setName('leaderboard').setDescription('Zobraz√≠ s√≠≈à sl√°vy - ≈æeb≈ô√≠ƒçek v≈°ech u≈æivatel≈Ø.').setDMPermission(false),
            new SlashCommandBuilder().setName('list-servers').setDescription('Vyp√≠≈°e seznam server≈Ø, kde se bot nach√°z√≠ (pouze pro majitele).').setDMPermission(false),
            new SlashCommandBuilder().setName('leave-server').setDescription('P≈ôinut√≠ bota opustit server podle ID (pouze pro majitele).').addStringOption(option => option.setName('id').setDescription('ID serveru, kter√Ω m√° bot opustit.').setRequired(true)).setDMPermission(false),
        ].map(command => command.toJSON());
        
        const clientId = process.env.CLIENT_ID;
        const guildId = process.env.GUILD_ID;
        if (!clientId || !guildId) { throw new Error("CLIENT_ID nebo GUILD_ID nen√≠ nastaveno!"); }
        await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: commands });
        console.log('√öspƒõ≈°nƒõ obnoveny aplikaƒçn√≠ p≈ô√≠kazy pro server.');
    } catch (error) { console.error('Chyba p≈ôi registraci (/) p≈ô√≠kaz≈Ø:', error); }
    
    try {
        const channel = await client.channels.fetch(startupChannelId);
        if (channel) {
            const startupEmbed = new EmbedBuilder().setColor('#00FF00').setTitle('üöÄ JSEM ZP√ÅTKY ONLINE! üöÄ').setDescription('Syst√©my nastartov√°ny, datab√°ze p≈ôipravena. Jsem p≈ôipraven hodnotit va≈°e chov√°n√≠! üëÄ').setImage('https://tenor.com/view/robot-ai-artificial-intelligence-hello-waving-gif-14586208').setTimestamp().setFooter({ text: 'mychalVidea' });
            await channel.send({ embeds: [startupEmbed] });
        }
    } catch (error) {}

    client.guilds.cache.forEach(guild => { if (guild.id !== allowedGuildId) { guild.leave(); } });
});

client.on('guildCreate', guild => { if (guild.id !== allowedGuildId) { guild.leave(); } });

client.on('interactionCreate', async interaction => {
    if (interaction.isButton()) {
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            return interaction.reply({ content: 'K t√©to akci nem√°≈° opr√°vnƒõn√≠.', flags: MessageFlags.Ephemeral });
        }
        const [action, originalMessageId, authorId] = interaction.customId.split('-');
        try {
            const originalMessageUrl = interaction.message.embeds[0].fields[0].value;
            const urlParts = originalMessageUrl.match(/channels\/(\d+)\/(\d+)\/(\d+)/);
            if (!urlParts) throw new Error("Nelze naj√≠t p≈Øvodn√≠ zpr√°vu z URL.");
            const channelId = urlParts[2];
            const messageId = urlParts[3];
            const channel = await client.channels.fetch(channelId);
            if (!channel) throw new Error("P≈Øvodn√≠ kan√°l nenalezen.");
            const messageToModerate = await channel.messages.fetch(messageId).catch(() => null);

            if (action === 'approve') {
                const approvedEmbed = new EmbedBuilder(interaction.message.embeds[0].toJSON()).setColor('#00FF00').setTitle('‚úÖ Schv√°leno Moder√°torem').setDescription(`Obr√°zek od <@${authorId}> byl ponech√°n.\nSchv√°lil: <@${interaction.user.id}>`);
                await interaction.update({ embeds: [approvedEmbed], components: [] });
            } else if (action === 'punish') {
                await updateRating(authorId, -2, `Nevhodn√Ω obr√°zek (rozhodnut√≠ moder√°tora)`);
                if (interaction.guild) {
                    await updateRoleStatus(authorId, interaction.guild);
                }
                if (messageToModerate) {
                    await messageToModerate.delete().catch(err => console.log("Nepoda≈ôilo se smazat zpr√°vu."));
                    const warningMsg = await channel.send(`<@${authorId}>, tv≈Øj obr√°zek/GIF byl vyhodnocen jako nevhodn√Ω a tv√© hodnocen√≠ bylo sn√≠≈æeno.`);
                    setTimeout(() => warningMsg.delete().catch(() => {}), 15000);
                }
                const punishedEmbed = new EmbedBuilder(interaction.message.embeds[0].toJSON()).setColor('#FF0000').setTitle('‚ùå Smaz√°no a Potrest√°no Moder√°torem').setDescription(`Obr√°zek od <@${authorId}> byl smaz√°n a u≈æivatel potrest√°n.\nModer√°tor: <@${interaction.user.id}>`);
                await interaction.update({ embeds: [punishedEmbed], components: [] });
            }
        } catch (error) {
            console.error("Chyba p≈ôi zpracov√°n√≠ interakce tlaƒç√≠tka:", error);
            await interaction.reply({ content: 'Do≈°lo k chybƒõ. Zkus to pros√≠m ruƒçnƒõ.', flags: MessageFlags.Ephemeral });
        }
        return;
    }

    if (!interaction.isChatInputCommand()) return;
    const { commandName } = interaction;
    const errorEmbed = new EmbedBuilder().setImage(errorGif);
    const ownerId = process.env.OWNER_ID;

    if (commandName === 'list-servers' || commandName === 'leave-server') {
        if (interaction.user.id !== ownerId) { return interaction.reply({ content: 'Tento p≈ô√≠kaz m≈Ø≈æe pou≈æ√≠t pouze majitel bota.', flags: MessageFlags.Ephemeral }); }
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });
        if (commandName === 'list-servers') {
            const guilds = client.guilds.cache.map(guild => `${guild.name} (ID: ${guild.id})`).join('\n');
            const content = `Bot se nach√°z√≠ na ${client.guilds.cache.size} serverech:\n\n${guilds}`;
            if (content.length > 2000) { const buffer = Buffer.from(content, 'utf-8'); return interaction.editReply({ content: 'Seznam server≈Ø je p≈ô√≠li≈° dlouh√Ω, pos√≠l√°m ho jako soubor.', files: [{ attachment: buffer, name: 'server-list.txt' }] }); }
            return interaction.editReply({ content });
        }
        if (commandName === 'leave-server') {
            const guildId = interaction.options.getString('id');
            const guild = client.guilds.cache.get(guildId);
            if (!guild) { return interaction.editReply({ content: `Chyba: Bot nen√≠ na ≈æ√°dn√©m serveru s ID \`${guildId}\`.` }); }
            try { await guild.leave(); return interaction.editReply({ content: `‚úÖ √öspƒõ≈°nƒõ jsem opustil server **${guild.name}**.` }); } catch (err) { return interaction.editReply({ content: `‚ùå Nepoda≈ôilo se opustit server. D≈Øvod: ${err.message}` }); }
        }
    }

    if (commandName === 'rate') {
        if (!interaction.member.roles.cache.has(ownerRoleId)) { return interaction.reply({ content: 'K tomuto p≈ô√≠kazu m√° p≈ô√≠stup pouze majitel serveru.', flags: MessageFlags.Ephemeral }); }
        await interaction.deferReply();
        const user = interaction.options.getUser('u≈æivatel');
        const rating = interaction.options.getNumber('hodnocen√≠');
        if (user.id === interaction.user.id) { return interaction.editReply({ content: 'Sna≈æ√≠≈° se s√°m sobƒõ d√°t hodnocen√≠, co? üòÇ', embeds: [errorEmbed] }); }
        if (user.bot) { return interaction.editReply({ content: 'Boti jsou mimo hodnocen√≠, k√°mo.', embeds: [errorEmbed] }); }
        await updateRating(user.id, rating, `Ruƒçnƒõ adminem ${interaction.user.tag}`);
        await updateRoleStatus(user.id, interaction.guild);
        const newAverage = await getAverageRating(user.id);
        await interaction.editReply({ content: `**<@${user.id}>** obdr≈æel(a) nov√© hodnocen√≠! üî• Nov√Ω pr≈Ømƒõr: **\`${newAverage.toFixed(2)} / 10\`**` });
    }

    if (commandName === 'score') {
        const isSelfCheck = !interaction.options.getUser('u≈æivatel');
        await interaction.deferReply({ flags: isSelfCheck ? MessageFlags.Ephemeral : 0 });
        const targetUser = interaction.options.getUser('u≈æivatel') || interaction.user;
        const averageRating = await getAverageRating(targetUser.id);
        const scoreMsg = (targetUser.id === interaction.user.id) ? `üåü Tv√© hodnocen√≠ je: **\`${averageRating.toFixed(2)} / 10\`**` : `üåü Pr≈Ømƒõrn√© hodnocen√≠ <@${targetUser.id}> je: **\`${averageRating.toFixed(2)} / 10\`**`;
        await interaction.editReply({ content: scoreMsg });
    }

    if (commandName === 'leaderboard') {
        await interaction.deferReply();
        const allRatings = db ? await db.collection('ratings').find({}).sort({ average: -1 }).limit(25).toArray() : [];
        if (allRatings.length === 0) { return interaction.editReply({ content: 'S√≠≈à sl√°vy je pr√°zdn√°!' }); }
        await interaction.guild.members.fetch();
        const scoreEmbed = new EmbedBuilder().setColor('#5865F2').setTitle('‚ú®üèÜ S√ç≈á SL√ÅVY üèÜ‚ú®').setDescription('Udr≈æuj si sk√≥re nad **9.0** a z√≠sk√°≈° p≈ô√≠stup do üëë | VIP kan√°lu pro vol√°n√≠ na streamech!\n\n').setTimestamp().setFooter({ text: 'Va≈°e chov√°n√≠ ovliv≈àuje va≈°e sk√≥re. Buƒète v pohodƒõ! üòâ' });
        let leaderboardString = '';
        let rank = 1;
        for (const userData of allRatings) {
            const member = interaction.guild.members.cache.get(userData._id);
            if (!member) continue;
            let roleIndicator = (member.roles.cache.has(roleId)) ? ' üëë' : '';
            let rankDisplay = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : `**${rank}.**`;
            leaderboardString += `${rankDisplay} <@${userData._id}> ‚Æû \` ${userData.average.toFixed(2)} / 10 \` ${roleIndicator}\n`;
            rank++;
        }
        scoreEmbed.setDescription(scoreEmbed.data.description + leaderboardString);
        await interaction.editReply({ embeds: [scoreEmbed] });
    }
});

client.on('guildMemberUpdate', async (oldMember, newMember) => {
    if (newMember.roles.cache.has(ownerRoleId)) return;
    const oldTimeoutEnd = oldMember.communicationDisabledUntilTimestamp;
    const newTimeoutEnd = newMember.communicationDisabledUntilTimestamp;
    if (newTimeoutEnd && newTimeoutEnd > Date.now() && newTimeoutEnd !== oldTimeoutEnd) {
        await updateRating(newMember.id, -3, "D≈Øvod: Timeout");
        await updateRoleStatus(newMember.id, newMember.guild, null);
        try {
            const channel = await client.channels.fetch(logChannelId);
            if (channel) channel.send(`U≈æivatel <@${newMember.id}> dostal timeout a jeho hodnocen√≠ bylo sn√≠≈æeno o **3 body**.`);
        } catch (err) {}
    }
});

client.on('guildBanAdd', async (ban) => {
    await resetRating(ban.user.id, "BAN");
    await updateRoleStatus(ban.user.id, ban.guild, null);
    try {
        const channel = await client.channels.fetch(logChannelId);
        if (channel) channel.send(`U≈æivatel **${ban.user.tag}** dostal BAN a jeho hodnocen√≠ bylo resetov√°no na **0**.`);
    } catch (err) {}
});
client.on('messageCreate', async message => {
    if (message.author.bot || !message.guild) return;
    if (otherBotPrefixes.some(p => message.content.startsWith(p)) || message.content.startsWith(prefix)) return;
    const wasModerated = await moderateMessage(message);
    if (!wasModerated && message.channel.id === activityChannelId) {
        if (!db) return;
        const messageCountsCollection = db.collection('messageCounts');
        const result = await messageCountsCollection.findOneAndUpdate(
            { _id: message.author.id },
            { $inc: { count: 1 }, $setOnInsert: { _id: message.author.id } },
            { upsert: true, returnDocument: 'after' }
        );
        const userMessageCount = result ? result.count : 1;
        if (userMessageCount >= 10) {
            await addActivityRating(message.author.id, "Aktivita");
            await updateRoleStatus(message.author.id, message.guild, message);
            await messageCountsCollection.updateOne({ _id: message.author.id }, { $set: { count: 0 } });
        }
    }
});
client.on('messageUpdate', async (oldMessage, newMessage) => {
    if (newMessage.partial) { try { await newMessage.fetch(); } catch { return; } }
    if (newMessage.author.bot || !newMessage.guild) return;
    if (oldMessage.content === newMessage.content) return;
    await moderateMessage(newMessage);
});

client.login(process.env.BOT_TOKEN);
