require('dotenv').config();

// P≈òID√ÅNY POT≈òEBN√â VƒöCI PRO SLASH P≈ò√çKAZY
const { Client, GatewayIntentBits, Partials, EmbedBuilder, PermissionsBitField, ActionRowBuilder, ButtonBuilder, ButtonStyle, REST, Routes, SlashCommandBuilder, PermissionFlagsBits, MessageFlags } = require('discord.js');
const fs = require('fs');
const axios = require('axios');
const sharp = require('sharp');
const getFrames = require('gif-frames');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildModeration
    ],
    partials: [Partials.Channel, Partials.GuildMember, Partials.Message]
});

// ======================= NASTAVEN√ç =======================
const prefix = 'm!'; // Prefix z≈Øst√°v√° pro p≈ô√≠padn√© budouc√≠ vyu≈æit√≠, ale p≈ô√≠kazy budou /
const roleId = process.env.ROLE_ID;
const geminiApiKey = process.env.GEMINI_API_KEY;
const tenorApiKey = process.env.TENOR_API_KEY; // <-- P≈òID√ÅNO PRO TENOR
const errorGif = 'https://tenor.com/view/womp-womp-gif-9875106689398845891';
const ownerRoleId = '875091178322812988';
const activityChannelId = '875097279650992128';
const startupChannelId = '1005985776158388264';
const logChannelId = '1025689879973203968';
const aiModerationChannelIds = ['875097279650992128', '1261094481415897128', '1275999194313785415', '1322337083745898616', '1419340737048350880'];
const MAX_WORDS_FOR_AI = 50;
const MIN_CHARS_FOR_AI = 4;
const COOLDOWN_SECONDS = 5;
const NOTIFICATION_COOLDOWN_MINUTES = 10;
const otherBotPrefixes = ['?', '!', 'db!', 'c!', '*'];
const emojiSpamRegex = /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]|<a?:\w+:\d+>){10,}/;
const mediaUrlRegex = /https?:\/\/(media\.tenor\.com|tenor\.com|giphy\.com|i\.imgur\.com|cdn\.discordapp\.com|img\.youtube\.com)\S+(?:\.gif|\.png|\.jpg|\.jpeg|\.webp|\.mp4)/i;
const MAX_FILE_SIZE_BYTES = 8 * 1024 * 1024;

// Modely pro textovou moderaci
let activeTextModel = 'gemini-2.5-flash-lite';
const fallbackTextModel = 'gemini-1.5-flash-latest';
let hasSwitchedTextFallback = false;

// Modely pro obr√°zkovou moderaci
const activeImageModel = 'gemini-2.5-pro';
const firstFallbackImageModel = 'gemini-1.5-pro-latest';
const secondFallbackImageModel = 'gemini-2.5-flash';
let hasSwitchedToFirstFallback = false;
let hasSwitchedToSecondFallback = false;

const level3Words = [ 'nigga', 'n1gga', 'n*gga', 'niggas', 'nigger', 'n1gger', 'n*gger', 'niggers', 'niga', 'n1ga', 'nygga', 'niggar', 'negr', 'ne*r', 'n*gr', 'n3gr', 'neger', 'negri', 'neger' ];
const level2Words = [ 'kundo', 'kundy', 'p√≠ƒço', 'pico', 'piƒço', 'ƒçur√°ku', 'curaku', 'ƒç≈Ør√°ku', 'p√≠ƒçus', 'picus', 'zmrd', 'zmrde', 'mrdko', 'buzerant', 'buzna', 'kurva', 'kurvo', 'kurvy', 'ƒçur√°k', 'curak', '≈°ukat', 'mrdat', 'bitch', 'b*tch', 'whore', 'slut', 'faggot', 'motherfucker', 'asshole', 'assh*le', 'bastard', 'cunt', 'c*nt', 'dickhead', 'dick', 'pussy', 'fuck', 'f*ck', 'fck', 'kys', 'kill yourself', 'go kill yourself', 'zabij se', 'fuk', 'hitler' ];
const level1Words = [ 'kret√©n', 'sraƒçka', 'p√≠ƒço', 'piƒço', 'fakin', 'curak', 'p√≠ƒça', 'zkurvysyn', 'dop√≠ƒçi', 'dokundy'];

const level3Regex = new RegExp(`\\b(${level3Words.join('|')})\\b`, 'i');
const level2Regex = new RegExp(`\\b(${level2Words.join('|')})\\b`, 'i');
const level1Regex = new RegExp(`\\b(${level1Words.join('|')})\\b`, 'i');

const userCooldowns = new Map();
let lastLimitNotificationTimestamp = 0;

const dataDirectory = './data';
const ratingsFilePath = `${dataDirectory}/ratings.json`;
const messageCountsFilePath = `${dataDirectory}/message_counts.json`;

if (!fs.existsSync(dataDirectory)) fs.mkdirSync(dataDirectory);
let ratings = {};
try { ratings = JSON.parse(fs.readFileSync(ratingsFilePath, 'utf8')); } catch (err) {}
let messageCounts = {};
try { messageCounts = JSON.parse(fs.readFileSync(messageCountsFilePath, 'utf8')); } catch (err) {}

function saveRatings() { try { fs.writeFileSync(ratingsFilePath, JSON.stringify(ratings, null, 2)); } catch (err) {} }
function saveMessageCounts() { try { fs.writeFileSync(messageCountsFilePath, JSON.stringify(messageCounts, null, 2)); } catch (err) {} }
function calculateAverage(userId) { const userRatings = ratings[userId] || []; if (userRatings.length === 0) return 5.0; let average = userRatings.reduce((a, b) => a + b, 0) / userRatings.length; return Math.max(0, Math.min(10, average));}
async function updateRoleStatus(userId, guild, sourceMessage = null) { try { if (!guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) return; const member = await guild.members.fetch(userId).catch(() => null); const role = guild.roles.cache.get(roleId); if (!member || !role) return; const averageRating = calculateAverage(userId); const hasRole = member.roles.cache.has(roleId); if (averageRating > 9 && !hasRole) { await member.roles.add(role); const messageContent = `üéâ Gratulace, <@${member.id}>! Tv√© sk√≥re tƒõ katapultovalo mezi elitu a z√≠skal(a) jsi roli **${role.name}**! üöÄ`; if (sourceMessage && sourceMessage.channel && !sourceMessage.deleted) { sourceMessage.reply(messageContent).catch(() => {}); } else { const channel = await client.channels.fetch(logChannelId).catch(() => null); if (channel) channel.send(messageContent).catch(() => {}); } } else if (averageRating <= 9 && hasRole) { await member.roles.remove(role); const messageContent = `üìâ Pozor, <@${member.id}>! Tv√© hodnocen√≠ kleslo a p≈ôi≈°el(a) jsi o roli **${role.name}**. Zaber!`; if (sourceMessage && sourceMessage.channel && !sourceMessage.deleted) { sourceMessage.reply(messageContent).catch(() => {}); } else { const channel = await client.channels.fetch(logChannelId).catch(() => null); if (channel) channel.send(messageContent).catch(() => {}); } } } catch (error) {} }
function addRating(userId, rating, reason = "") { if (!ratings[userId]) ratings[userId] = []; ratings[userId].push(rating); if (ratings[userId].length > 10) ratings[userId].shift(); saveRatings(); console.log(`U≈æivatel ${userId} dostal hodnocen√≠ ${rating}. ${reason}`);}
function cleanupOldRatings() { let changed = false; for (const userId in ratings) { if (ratings[userId].length > 10) { ratings[userId] = ratings[userId].slice(-10); changed = true; } } if (changed) saveRatings(); }
cleanupOldRatings();

async function analyzeText(text) {
    if (!geminiApiKey) return false;
    const prompt = `Jsi AI moder√°tor pro neform√°ln√≠, hern√≠ Discord server. Tv√Ωm √∫kolem je odhalit zpr√°vy, kter√© jsou ≈°kodliv√©. Ignoruj bƒõ≈æn√© lehk√© nad√°vky a p≈ô√°telsk√© po≈°≈•uchov√°n√≠. Zas√°hni, pokud zpr√°va p≈ôekroƒç√≠ hranici bƒõ≈æn√©ho "trash talku" a stane se z n√≠ nen√°vistn√Ω projev, vyhro≈æov√°n√≠ nebo ≈°ikana. Je tato zpr√°va takov√°? Odpovƒõz jen "ANO" nebo "NE".\n\nText: "${text}"`;
    const requestBody = { contents: [{ parts: [{ text: prompt }] }], generationConfig: { maxOutputTokens: 5 } };
    try {
        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/${activeTextModel}:generateContent?key=${geminiApiKey}`, requestBody);
        const candidateText = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!candidateText) {
            console.log(`Gemini textov√° anal√Ωza (${activeTextModel}) byla zablokov√°na bezpeƒçnostn√≠m filtrem.`);
            return false;
        }
        return candidateText.trim().toUpperCase().includes("ANO");
    } catch (error) {
        const status = error.response ? error.response.status : null;
        if ((status === 429 || status === 404) && !hasSwitchedTextFallback) {
            console.warn(`Model ${activeTextModel} selhal (stav: ${status}). P≈ôep√≠n√°m na z√°lo≈æn√≠ model: ${fallbackTextModel}`);
            activeTextModel = fallbackTextModel;
            hasSwitchedTextFallback = true;
            try { const channel = await client.channels.fetch(logChannelId); if (channel) channel.send(`üü° **VAROV√ÅN√ç:** Prim√°rn√≠ AI model pro text selhal. Automaticky p≈ôep√≠n√°m na z√°lo≈æn√≠ model.`); } catch (err) {}
            return analyzeText(text);
        }
        if (status === 429) { return 'API_LIMIT'; }
        console.error(`Chyba p≈ôi komunikaci s Gemini API (${activeTextModel}):`, error.response ? error.response.data.error : error.message);
        return false;
    }
}

// ================== P≈òIDAN√Å FUNKCE PRO TENOR API ==================
async function getDirectTenorUrl(tenorUrl) {
    if (!tenorApiKey) {
        console.warn("TENOR_API_KEY nen√≠ nastaven. Moderace Tenor GIF≈Ø nemus√≠ b√Ωt spolehliv√°.");
        return tenorUrl;
    }
    // Vylep≈°en√Ω regex pro z√≠sk√°n√≠ ID z r≈Øzn√Ωch typ≈Ø Tenor URL
    const gifIdMatch = tenorUrl.match(/\/view\/.*-(\d+)$/) || tenorUrl.match(/\/(\d+)$/);
    if (!gifIdMatch) return tenorUrl;

    const gifId = gifIdMatch[1];
    try {
        const apiUrl = `https://tenor.googleapis.com/v2/posts?ids=${gifId}&key=${tenorApiKey}&media_filter=mediumgif`;
        const response = await axios.get(apiUrl);
        return response.data?.results[0]?.media_formats?.mediumgif?.url || tenorUrl;
    } catch (error) {
        console.error(`Chyba p≈ôi z√≠sk√°v√°n√≠ GIFu z Tenor API pro ID ${gifId}:`, error.message);
        return tenorUrl;
    }
}

async function analyzeImage(imageUrl) {
    if (!geminiApiKey) return false;
    const modelsToTry = [activeImageModel, firstFallbackImageModel, secondFallbackImageModel];
    let lastError = null, imageBuffer, mimeType;
    try {
        const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        imageBuffer = response.data;
        mimeType = response.headers['content-type'];

        if (!mimeType) {
            console.error(`Chyba: Z URL ${imageUrl} se nepoda≈ôilo z√≠skat content-type.`);
            return 'FILTERED';
        }
        if (mimeType.startsWith('image/gif')) {
            const frames = await getFrames({ url: imageBuffer, frames: 'all', outputType: 'png', quality: 10 });
            if (frames.length === 0) return false;
            const middleFrameIndex = Math.floor(frames.length / 2);
            imageBuffer = await new Promise((resolve, reject) => {
                const stream = frames[middleFrameIndex].getImage();
                const chunks = [];
                stream.on('data', chunk => chunks.push(chunk));
                stream.on('error', reject);
                stream.on('end', () => resolve(Buffer.concat(chunks)));
            });
            mimeType = 'image/png';
        } else if (mimeType.startsWith('image/')) {
            imageBuffer = await sharp(imageBuffer).resize({ width: 512, withoutEnlargement: true }).toBuffer();
        } else {
            return false;
        }
    } catch (preprocessingError) {
        console.error(`Chyba p≈ôi p≈ôedzpracov√°n√≠ obr√°zku ${imageUrl}:`, preprocessingError.message);
        return 'FILTERED';
    }
    const base64Image = imageBuffer.toString('base64');
    const prompt = `Jsi AI moder√°tor pro hern√≠ Discord server. Posuƒè, jestli je tento obr√°zek skuteƒçnƒõ nevhodn√Ω pro komunitu (pornografie, gore, explicitn√≠ n√°sil√≠, nen√°vistn√© symboly, rasismus). Ignoruj hern√≠ n√°sil√≠ (st≈ô√≠len√≠ ve hr√°ch), krev ve hr√°ch, hern√≠ rozhran√≠ (UI) a bƒõ≈æn√© internetov√© memy, kter√© nejsou extr√©mn√≠. Buƒè shov√≠vav√Ω k textu na screenshotech. Odpovƒõz jen "ANO" (pokud je nevhodn√Ω) nebo "NE" (pokud je v po≈ô√°dku).`;
    const requestBody = { contents: [{ parts: [{ text: prompt }, { inline_data: { mime_type: mimeType, data: base64Image } }] }] };
    for (const model of modelsToTry) {
        try {
            const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${geminiApiKey}`, requestBody);
            if (!response.data.candidates || response.data.candidates.length === 0) {
                console.log(`Gemini obr√°zkov√° anal√Ωza (${model}) byla zablokov√°na bezpeƒçnostn√≠m filtrem pro obr√°zek: ${imageUrl}`);
                return 'FILTERED';
            }
            const result = response.data.candidates[0].content.parts[0].text.trim().toUpperCase();
            return result.includes("ANO");
        } catch (error) {
            lastError = error;
            const status = error.response ? error.response.status : null;
            if (status === 429 || status === 404 || status === 500) {
                if (model === activeImageModel && !hasSwitchedToFirstFallback) {
                    console.warn(`Model ${model} selhal (stav: ${status}). P≈ôep√≠n√°m na prvn√≠ z√°lohu: ${firstFallbackImageModel}`);
                    hasSwitchedToFirstFallback = true;
                    try { const channel = await client.channels.fetch(logChannelId); if (channel) channel.send(`üü† **VAROV√ÅN√ç:** Prim√°rn√≠ AI model pro obr√°zky selhal. Automaticky p≈ôep√≠n√°m na prvn√≠ z√°lo≈æn√≠ model.`); } catch (err) {}
                } else if (model === firstFallbackImageModel && !hasSwitchedToSecondFallback) {
                    console.warn(`Model ${model} selhal (stav: ${status}). P≈ôep√≠n√°m na druhou (posledn√≠) z√°lohu: ${secondFallbackImageModel}`);
                    hasSwitchedToSecondFallback = true;
                    try { const channel = await client.channels.fetch(logChannelId); if (channel) channel.send(`üî¥ **KRITICK√â VAROV√ÅN√ç:** Z√°lo≈æn√≠ AI model pro obr√°zky selhal. P≈ôep√≠n√°m na posledn√≠ z√°chrannou mo≈ænost (${secondFallbackImageModel}).`); } catch (err) {}
                }
            } else { break; }
        }
    }
    console.error(`V≈°echny AI modely pro anal√Ωzu obr√°zk≈Ø selhaly pro ${imageUrl}. Posledn√≠ chyba: ${lastError.message}`);
    return 'FILTERED';
}

async function moderateMessage(message) {
    if (!message.guild || !message.author || message.author.bot) return false;
    const member = await message.guild.members.fetch(message.author.id).catch(() => null);
    if (!member || member.roles.cache.has(ownerRoleId)) return false;

    if (aiModerationChannelIds.includes(message.channel.id)) {
        let mediaUrl = null;

        // OPRAVA 1: Pou≈æit√≠ `proxyURL` pro p≈ô√≠lohy, aby nevypr≈°ely
        if (message.attachments.size > 0) {
            const attachment = message.attachments.first();
            if (attachment.size < MAX_FILE_SIZE_BYTES && (attachment.contentType?.startsWith('image/'))) {
                mediaUrl = attachment.proxyURL;
            }
        }
        if (!mediaUrl && message.embeds.length > 0) {
            const embed = message.embeds[0];
            if (embed.image) mediaUrl = embed.image.url;
            else if (embed.thumbnail) mediaUrl = embed.thumbnail.url;
            else if (embed.url && (embed.type === 'image' || embed.type === 'gifv')) mediaUrl = embed.url;
        }
        if (!mediaUrl) {
            const match = message.content.match(mediaUrlRegex);
            if (match) mediaUrl = match[0];
        }

        if (mediaUrl) {
            let finalMediaUrl = mediaUrl;
            // OPRAVA 2: Zpracov√°n√≠ Tenor odkaz≈Ø p≈ôes API pro spolehlivost
            if (mediaUrl.includes('tenor.com')) {
                finalMediaUrl = await getDirectTenorUrl(mediaUrl);
            }
            
            const imageResult = await analyzeImage(finalMediaUrl);
            if (imageResult === true) {
                addRating(message.author.id, -2, `D≈Øvod: Nevhodn√Ω obr√°zek/GIF (detekov√°no AI)`);
                await updateRoleStatus(message.author.id, message.guild, message);
                try {
                    await message.delete();
                    const warningMsg = await message.channel.send(`<@${message.author.id}>, tv≈Øj obr√°zek/GIF byl vyhodnocen jako nevhodn√Ω a tv√© hodnocen√≠ bylo sn√≠≈æeno.`);
                    setTimeout(() => warningMsg.delete().catch(() => {}), 15000);
                } catch (err) {}
                return true;
            } else if (imageResult === 'FILTERED') {
                const logChannel = await client.channels.fetch(logChannelId).catch(() => null);
                if (logChannel) {
                    const embed = new EmbedBuilder().setColor('#FFA500').setTitle('‚ö†Ô∏è AI Moderace Selhala').setDescription(`AI nedok√°zala analyzovat obr√°zek od <@${message.author.id}>.\n≈Ω√°d√°m o lidsk√Ω posudek.`).setImage(finalMediaUrl).addFields({ name: 'Odkaz na zpr√°vu', value: `[Klikni zde](${message.url})` }).setTimestamp();
                    const row = new ActionRowBuilder().addComponents(
                        new ButtonBuilder().setCustomId(`approve-${message.id}-${message.author.id}`).setLabel('‚úÖ Ponechat').setStyle(ButtonStyle.Success),
                        new ButtonBuilder().setCustomId(`punish-${message.id}-${message.author.id}`).setLabel('‚ùå Smazat a potrestat').setStyle(ButtonStyle.Danger)
                    );
                    await logChannel.send({ embeds: [embed], components: [row] });
                }
                return false;
            }
        }

        let textToAnalyze = message.content.replace(mediaUrlRegex, '').trim();
        if (textToAnalyze.length === 0 && message.embeds.length > 0) {
            const embed = message.embeds[0];
            textToAnalyze = [embed.title, embed.description, ...embed.fields.map(f => f.value)].filter(Boolean).join(' ');
        }
        if (textToAnalyze.length === 0) return false;

        if (emojiSpamRegex.test(textToAnalyze)) {
            try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, hoƒè se do klidu, tolik emoji nen√≠ nutn√Ω! üòÇ`); setTimeout(() => warningMsg.delete().catch(() => {}), 10000); } catch (err) {}
            return true;
        }
        if (level3Regex.test(textToAnalyze)) {
            ratings[message.author.id] = [0]; saveRatings();
            await updateRoleStatus(message.author.id, message.guild, message);
            try { await message.delete(); const warningMsg = await message.channel.send(`U≈æivatel <@${message.author.id}> pou≈æil p≈ô√≠snƒõ zak√°zan√© slovo. Tvoje hodnocen√≠ bylo **resetov√°no na 0**!`); setTimeout(() => warningMsg.delete().catch(() => {}), 20000); } catch (err) {}
            return true;
        }
        if (level2Regex.test(textToAnalyze)) {
            addRating(message.author.id, -3, "D≈Øvod: Hrub√° ur√°≈æka");
            await updateRoleStatus(message.author.id, message.guild, message);
            try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, za toto chov√°n√≠ ti byl sn√≠≈æen rating o **3 body**.`); setTimeout(() => warningMsg.delete().catch(() => {}), 10000); } catch (err) {}
            return true;
        }
        if (level1Regex.test(textToAnalyze)) {
            addRating(message.author.id, -1, "D≈Øvod: Nevhodn√© slovo");
            await updateRoleStatus(message.author.id, message.guild, message);
            try { const warningReply = await message.reply(`Slovn√≠k pros√≠m. ü§´ Za tuto zpr√°vu ti byl lehce sn√≠≈æen rating.`); setTimeout(() => warningReply.delete().catch(() => {}), 10000); } catch (err) {}
            return true;
        }
        const wordCount = textToAnalyze.split(' ').length;
        if (textToAnalyze.length >= MIN_CHARS_FOR_AI && wordCount <= MAX_WORDS_FOR_AI) {
            const now = Date.now();
            const lastCheck = userCooldowns.get(message.author.id);
            if (!lastCheck || (now - lastCheck > COOLDOWN_SECONDS * 1000)) {
                userCooldowns.set(message.author.id, now);
                const toxicityResult = await analyzeText(textToAnalyze);
                if (toxicityResult === true) {
                    addRating(message.author.id, -2, `D≈Øvod: Toxick√° zpr√°va (detekov√°no AI)`);
                    await updateRoleStatus(message.author.id, message.guild, message);
                    try { await message.delete(); const warningMsg = await message.channel.send(`<@${message.author.id}>, tv√° zpr√°va byla nevhodn√° a tv√© hodnocen√≠ bylo sn√≠≈æeno.`); setTimeout(() => warningMsg.delete().catch(() => {}), 15000); } catch (err) {}
                    return true;
                } else if (toxicityResult === 'API_LIMIT') {
                    if (now - lastLimitNotificationTimestamp > NOTIFICATION_COOLDOWN_MINUTES * 60 * 1000) {
                        lastLimitNotificationTimestamp = now;
                        try { const reply = await message.reply(`AI nemohla tuto zpr√°vu ovƒõ≈ôit, proto≈æe si dala ≈°lof√≠ka na p√°r hodin!`); setTimeout(() => reply.delete().catch(() => {}), 300000); } catch(err) {}
                    }
                }
            }
        }
    }
    return false;
}

// ================== P≈òID√ÅNA REGISTRACE SLASH P≈ò√çKAZ≈Æ ==================
client.once('clientReady', async () => {
    console.log(`Bot je online jako ${client.user.tag}!`);
    
    // Registrace p≈ô√≠kaz≈Ø
    try {
        console.log('Zapoƒçato obnovov√°n√≠ aplikaƒçn√≠ch (/) p≈ô√≠kaz≈Ø.');
        const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
        
        const commands = [
            new SlashCommandBuilder()
                .setName('score')
                .setDescription('Zobraz√≠ tv√© hodnocen√≠ nebo hodnocen√≠ jin√©ho u≈æivatele.')
                .addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, jeho≈æ sk√≥re chce≈° vidƒõt.')),
            new SlashCommandBuilder()
                .setName('scoreboard')
                .setDescription('Zobraz√≠ s√≠≈à sl√°vy - ≈æeb≈ô√≠ƒçek v≈°ech u≈æivatel≈Ø.'),
            new SlashCommandBuilder()
                .setName('rate')
                .setDescription('Ohodnot√≠ u≈æivatele (pouze pro adminy).')
                .addUserOption(option => option.setName('u≈æivatel').setDescription('U≈æivatel, kter√©ho chce≈° ohodnotit.').setRequired(true))
                .addNumberOption(option => option.setName('hodnocen√≠').setDescription('ƒå√≠slo od -10 do 10.').setRequired(true))
                .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
        ].map(command => command.toJSON());

        const clientId = process.env.CLIENT_ID;
        const guildId = process.env.GUILD_ID;
        if (!clientId || !guildId) throw new Error("CLIENT_ID nebo GUILD_ID chyb√≠ v .env souboru!");

        await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: commands });
        console.log('√öspƒõ≈°nƒõ obnoveny aplikaƒçn√≠ p≈ô√≠kazy.');
    } catch (error) {
        console.error('Chyba p≈ôi registraci (/) p≈ô√≠kaz≈Ø:', error);
    }
    
    // Zpr√°va o spu≈°tƒõn√≠
    try {
        const channel = await client.channels.fetch(startupChannelId);
        if (channel) {
            const startupEmbed = new EmbedBuilder().setColor('#00FF00').setTitle('üöÄ JSEM ZP√ÅTKY ONLINE! üöÄ').setDescription('Syst√©my nastartov√°ny, datab√°ze proƒçi≈°tƒõna. Jsem p≈ôipraven hodnotit va≈°e chov√°n√≠! üëÄ').setImage('https://tenor.com/view/robot-ai-artificial-intelligence-hello-waving-gif-14586208').setTimestamp().setFooter({ text: 'mychalVidea' });
            await channel.send({ embeds: [startupEmbed] });
        }
    } catch (error) {}
});

// ================== P≈òID√ÅNA/UPRAVENA LOGIKA PRO INTERAKCE ==================
client.on('interactionCreate', async interaction => {
    // Zpracov√°n√≠ tlaƒç√≠tek (z≈Østalo stejn√©)
    if (interaction.isButton()) {
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            return interaction.reply({ content: 'K t√©to akci nem√°≈° opr√°vnƒõn√≠.', ephemeral: true });
        }
        const [action, , authorId] = interaction.customId.split('-');
        try {
            const originalMessageUrl = interaction.message.embeds[0].fields[0].value;
            const urlParts = originalMessageUrl.match(/channels\/(\d+)\/(\d+)\/(\d+)/);
            if (!urlParts) throw new Error("Nelze naj√≠t p≈Øvodn√≠ zpr√°vu z URL.");
            const [, , channelId, messageId] = urlParts;
            const channel = await client.channels.fetch(channelId);
            if (!channel) throw new Error("P≈Øvodn√≠ kan√°l nenalezen.");
            const messageToModerate = await channel.messages.fetch(messageId).catch(() => null);
            if (action === 'approve') {
                const approvedEmbed = new EmbedBuilder(interaction.message.embeds[0].toJSON())
                    .setColor('#00FF00').setTitle('‚úÖ Schv√°leno Moder√°torem')
                    .setDescription(`Obr√°zek od <@${authorId}> byl ponech√°n.\nSchv√°lil: <@${interaction.user.id}>`);
                await interaction.update({ embeds: [approvedEmbed], components: [] });
            } else if (action === 'punish') {
                addRating(authorId, -2, `D≈Øvod: Nevhodn√Ω obr√°zek (rozhodnut√≠ moder√°tora)`);
                if (interaction.guild) {
                    await updateRoleStatus(authorId, interaction.guild);
                }
                if (messageToModerate) {
                    await messageToModerate.delete().catch(err => console.log("Nepoda≈ôilo se smazat zpr√°vu."));
                    const warningMsg = await channel.send(`<@${authorId}>, tv≈Øj obr√°zek/GIF byl vyhodnocen jako nevhodn√Ω a tv√© hodnocen√≠ bylo sn√≠≈æeno.`);
                    setTimeout(() => warningMsg.delete().catch(() => {}), 15000);
                }
                const punishedEmbed = new EmbedBuilder(interaction.message.embeds[0].toJSON())
                    .setColor('#FF0000').setTitle('‚ùå Smaz√°no a Potrest√°no Moder√°torem')
                    .setDescription(`Obr√°zek od <@${authorId}> byl smaz√°n a u≈æivatel potrest√°n.\nModer√°tor: <@${interaction.user.id}>`);
                await interaction.update({ embeds: [punishedEmbed], components: [] });
            }
        } catch (error) {
            console.error("Chyba p≈ôi zpracov√°n√≠ interakce:", error);
            await interaction.reply({ content: 'Do≈°lo k chybƒõ. Zkus to pros√≠m ruƒçnƒõ.', ephemeral: true });
        }
        return;
    }

    // Zpracov√°n√≠ slash p≈ô√≠kaz≈Ø
    if (interaction.isChatInputCommand()) {
        const { commandName } = interaction;

        if (commandName === 'score') {
            const targetUser = interaction.options.getUser('u≈æivatel') || interaction.user;
            const isSelfCheck = targetUser.id === interaction.user.id;
            
            const userRatings = ratings[targetUser.id] || [];
            if (userRatings.length === 0) {
                let errorMsg = isSelfCheck ? 'Zat√≠m nem√°≈° ≈æ√°dn√© hodnocen√≠, k√°mo! ü§∑' : `U≈æivatel ${targetUser.toString()} je zat√≠m nepopsan√Ω list. üìú`;
                return interaction.reply({ content: errorMsg, ephemeral: true });
            }
            
            const averageRating = calculateAverage(targetUser.id);
            let scoreMsg = isSelfCheck ? `üåü Tv√© pr≈Ømƒõrn√© hodnocen√≠ je: **\`${averageRating.toFixed(2)} / 10\`**` : `üåü Pr≈Ømƒõrn√© hodnocen√≠ u≈æivatele ${targetUser.toString()} je: **\`${averageRating.toFixed(2)} / 10\`**`;
            
            await interaction.reply({ content: scoreMsg, ephemeral: isSelfCheck });
        }

        if (commandName === 'scoreboard') {
            await interaction.deferReply();
            const userIds = Object.keys(ratings).filter(id => ratings[id] && ratings[id].length > 0);
            if (userIds.length === 0) {
                return interaction.editReply({ content: 'S√≠≈à sl√°vy je pr√°zdn√°!' });
            }
            
            await interaction.guild.members.fetch({ user: userIds }).catch(() => {});
            userIds.sort((a, b) => calculateAverage(b) - calculateAverage(a));

            const scoreEmbed = new EmbedBuilder().setColor('#5865F2').setTitle('‚ú®üèÜ S√ç≈á SL√ÅVY üèÜ‚ú®').setDescription('Udr≈æuj si sk√≥re nad **9.0** a z√≠sk√°≈° p≈ô√≠stup do üëë | VIP kan√°lu pro vol√°n√≠ na streamech!\n\n').setTimestamp().setFooter({ text: 'Va≈°e chov√°n√≠ ovliv≈àuje va≈°e sk√≥re. Buƒète v pohodƒõ! üòâ' });
            
            let leaderboardString = '';
            const topUsers = userIds.slice(0, 25);
            for (let i = 0; i < topUsers.length; i++) {
                const userId = topUsers[i];
                const member = interaction.guild.members.cache.get(userId);
                if (!member) continue;
                
                const averageRating = calculateAverage(userId);
                const roleIndicator = member.roles.cache.has(roleId) ? ' üëë' : '';
                const rank = i + 1;
                let rankDisplay;
                if (rank === 1) rankDisplay = 'ü•á'; else if (rank === 2) rankDisplay = 'ü•à'; else if (rank === 3) rankDisplay = 'ü•â'; else rankDisplay = `**${rank}.**`;
                leaderboardString += `${rankDisplay} ${member.toString()} ‚Æû \` ${averageRating.toFixed(2)} / 10 \` ${roleIndicator}\n`;
            }
            scoreEmbed.setDescription(scoreEmbed.data.description + leaderboardString);
            await interaction.editReply({ embeds: [scoreEmbed] });
        }

        if (commandName === 'rate') {
            const user = interaction.options.getUser('u≈æivatel');
            const rating = interaction.options.getNumber('hodnocen√≠');

            if (user.bot) return interaction.reply({ content: 'Boti se nehodnot√≠.', ephemeral: true });
            if (user.id === interaction.user.id) return interaction.reply({ content: 'Nem≈Ø≈æe≈° hodnotit s√°m sebe.', ephemeral: true });
            if (rating < -10 || rating > 10) return interaction.reply({ content: 'Hodnocen√≠ mus√≠ b√Ωt v rozmez√≠ -10 a≈æ 10.', ephemeral: true });

            addRating(user.id, rating, `Ruƒçnƒõ adminem ${interaction.user.tag}`);
            await updateRoleStatus(user.id, interaction.guild);
            const averageRating = calculateAverage(user.id);
            await interaction.reply(`**${user.toString()}** obdr≈æel(a) nov√© hodnocen√≠! üî• Nov√Ω pr≈Ømƒõr: **\`${averageRating.toFixed(2)} / 10\`**`);
        }
    }
});

client.on('guildMemberUpdate', async (oldMember, newMember) => {
    if (newMember.roles.cache.has(ownerRoleId)) return;
    const oldTimeoutEnd = oldMember.communicationDisabledUntilTimestamp;
    const newTimeoutEnd = newMember.communicationDisabledUntilTimestamp;
    if (newTimeoutEnd && newTimeoutEnd > Date.now() && newTimeoutEnd !== oldTimeoutEnd) {
        addRating(newMember.id, -3, "D≈Øvod: Timeout");
        await updateRoleStatus(newMember.id, newMember.guild, null);
        try {
            const channel = await client.channels.fetch(logChannelId);
            if (channel) channel.send(`U≈æivatel <@${newMember.id}> dostal timeout a jeho hodnocen√≠ bylo sn√≠≈æeno o **3 body**.`);
        } catch (err) {}
    }
});

client.on('guildBanAdd', async (ban) => {
    ratings[ban.user.id] = [0];
    saveRatings();
    await updateRoleStatus(ban.user.id, ban.guild, null);
    try {
        const channel = await client.channels.fetch(logChannelId);
        if (channel) channel.send(`U≈æivatel **${ban.user.tag}** dostal BAN a jeho hodnocen√≠ bylo resetov√°no na **0**.`);
    } catch (err) {}
});

// ================== ZJEDNODU≈†EN√ù LISTENER ZPR√ÅV ==================
client.on('messageCreate', async message => {
    if (message.author.bot || !message.guild) return;
    if (otherBotPrefixes.some(p => message.content.startsWith(p))) return;
    
    // Star√© p≈ô√≠kazy na `m!` jsou odstranƒõny. Listener se star√° jen o moderaci a aktivitu.
    const wasModerated = await moderateMessage(message);
    if (!wasModerated && message.channel.id === activityChannelId) {
        if (!messageCounts[message.author.id]) messageCounts[message.author.id] = 0;
        messageCounts[message.author.id]++;
        if (messageCounts[message.author.id] >= 10) {
            if (!ratings[message.author.id] || ratings[message.author.id].length === 0) {
                addRating(message.author.id, 5, "D≈Øvod: Prvn√≠ odmƒõna za aktivitu");
            } else {
                addRating(message.author.id, 10, "D≈Øvod: Aktivita");
            }
            await updateRoleStatus(message.author.id, message.guild, message);
            messageCounts[message.author.id] = 0;
        }
        saveMessageCounts();
    }
});
client.on('messageUpdate', async (oldMessage, newMessage) => {
    if (newMessage.partial) {
        try { await newMessage.fetch(); } catch { return; }
    }
    if (newMessage.author.bot || !newMessage.guild) return;
    if (oldMessage.content === newMessage.content) return;
    await moderateMessage(newMessage);
});
client.login(process.env.BOT_TOKEN);
